new ES6 stuff:

const { parts } = this.props #deref a key inside of this.props
constructor() {
    super()                  # need to call this
    this.state = {           # set initial state
      parts: null,
      error: null,
    }
	NEED TO BIND CLASS FUNCTIONS IN HERE IE:
	this.func = this.func.bind(this);
}
func() {some function here that needs to be bound}

 __________________________________________________________

# components :

 a component takes in state and properties, this is rendered to HTML.
 the Virtual DOM is used to precompile JSX into React syntax. The virtual dom
  also re-renders components, and only makes changes to the browser dom in areas
  that have changed. (it compares Virtual DOMs).

const Component = React.createClass({
  render() {
    return (
		<jsx here>
    );
  }
});

# renders the component using :
# takes in the component and the element in HTML

React.render(
  <Component />,
  document.getElementById('elementIdInHTML')
);

_________	 state  _________________________________________________


# getInitialState, returns object with properties that represent elements
# of the state: 
							now uses constructor()

constructor () {
	super()
    this.state = {keys:values};
}

# use {}
# this.state.elementOfState (property of the state function)

# set Local State:
this.setState({ element: new_value})

OLDER BELOW HERE:


_++++++++++++++++++++____+++++++++++++++___+++++++++++++++++____++++++

____ global state __________________________________________


# need a main class that returns children in the render function
# pass the parent state as a object:
	<ChildClass localVarNameForChild = { this.NameOfVar }
# var can be a function handling state
# use this.props.localVarNameForChild

____ arrays _______________________________________________

# add array to state
# create a map callback for array :
this.state.arrayName.map(function (ValueInArray) {
          return <ChildComponent childVarName=passInSOmething />
          })
# remember can add to array state like:
this.setState({ arrayName: this.state.arrayName.concat(dataToAdd)})
__________________________________________________________
#events

#added within the HTML (jsx) tags:
<button onClick={pass_in_a_local_function_using(this.localFunction)}  ></button>
# onClick()
# onChange()
# onSubmit()
